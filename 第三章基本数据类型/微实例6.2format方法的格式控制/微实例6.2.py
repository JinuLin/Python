# 微实例3.6.2format方法的格式控制
# format还包括格式控制信息，此时槽内部样式为{<参数序号>:<格式控制标记>}格式
# 格式控制标记包括<填充>、<对齐>、<宽度>、<,>、<.精度>、<类型>
# :是引导符
# 填充：用于填充单个字符。
# 对齐：<左对齐、>右对齐、^居中对齐
# 宽度：槽的设定输出宽度
# ,：数字的千位分隔符适用于整数和浮点数
# .精度：浮点数小数部分的精度或字符串的最大输出长度
# 类型：整数类型b,c,d,o,x,X，浮点数类型e,E,f%

s = "PYTHON"
print("{0:30}".format(s))  # 默认左对齐
print("{0:>30}".format(s))  # 右对齐
print("{0:*^30}".format(s))  # 居中对齐且用*号填充
print("{0:-^30}".format(s))  # 居中对齐且用-号填充
print("{0:3}".format(s))

# (,)用于显示数字类型的千分位分隔符
print("{0:-^20,}".format(1234567890))
print("{0:-^20}".format(1234567890))  # 对比输出
print("{0:-^20,}".format(12345.67890))

# <.精度>表示两个含义，由于小数点（.）开头
print("{0:.2f}".format(12345.67890))  # 对于浮点数，精度表示小数部分输出的有效位数
print("{0:H^20.3f}".format(12345.67890))
print("{0:.4}".format("PYTHON"))  # 对于字符串，精度表示输出的最大长度

# <类型>表示输出整数和浮点数类型的格式规则。
# 整数类型，输出格式包括以下6种
# b：整数输出的二进制方式7unh8j
# c：输出整数对应的Unicode字符
# d：输出整数的十进制方式
# o：输出整数的八进制方式
# x：输出整数的小写十六进制方式
# X：输出整数的大写十六进制方式
print("{0:b},{0:c},{0:d},{0:o},{0:x},{0:X}".format(425))
# 浮点数类型，输出格式包括以下4种
# e：输出浮点数对应的小写字母e的指数形式
# E：输出浮点数对应的小写字母e的指数形式
# f：输出浮点数的标准浮点形式
# %：输出浮点数的百分形式
print("{0:e},{0:E},{0:f},{0:%}".format(3.14))
print("{0:.2e},{0:.2E},{0:.2f},{0:.2%}".format(3.14))  # 浮点数输出时尽量使用<.精度>表示小数部分的宽度，有助于更好控制输出格式
