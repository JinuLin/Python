# 微实例5.2.4函数对变量的作用
# 一个程序中的变量包括两类：全局变量和局部变量。
# 全局变量指在函数之外定义的变量，一般没有缩进，在程序执行全过程有效。
# 局部变量指在函数内部使用的变量，仅在函数内部有效当函数退出时变量将不存在。
n = 1  # n是全局变量


def func(a, b):
    n = b  # 这个n是在函数内存中新生成的局部变量，不是全局变量
    return a * b


s = func("knock~", 2)
print(s, n)  # n值没有发生变化
# 在函数内部定义的局部变量在函数执行完毕后将被销毁，函数外部的全局变量在函数执行完毕后依然有效

n = 1  # n是全局变量


def func(a, b):
    global n  # 使用global关键字将局部变量n声明为全局变量
    n = b  # 将局部变量b赋值给全局变量n
    return a * b


s = func("knock~", 2)
print(s, n)  # n值会改变

ls = []  # ls是全局列表变量


def func(a, b):
    ls.append(b)  # 将局部变量b增加到全局列表变量ls中
    return a * b


s = func("knock~", 2)
print(s, ls)  # ls值会改变，函数内部的局部变量b被增加到全局列表变量ls中

"""
简单数据类型变量无论是否与全局变量重名，仅在函数内部创建和使用，函数退出后变量被释放；
简单数据类型变量在用global保留字声明后，作为全局变量；
对于组合数据类型的全局变量，如果在函数内部没有被真实创建的同名变量，则函数内部可直接使用并修改全局变量的值；
如果函数内部真实创建了组合数据类型变量，无论是否有同名全局变量，函数仅对局部变量进行操作。
"""
